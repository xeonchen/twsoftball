/**
 * @file EndGameResult
 * Result DTO returned after attempting to end a softball game.
 *
 * @remarks
 * This result encapsulates the complete outcome of the EndGame use case,
 * providing either successful game conclusion details with final statistics
 * and state information, or detailed error information explaining why the
 * game could not be ended.
 *
 * The result includes comprehensive information about the game ending:
 * - Final game state and official status
 * - Complete statistics and performance summaries
 * - Generated events and audit trail information
 * - Next steps and follow-up actions required
 * - Notification and communication details
 *
 * Success results provide all information needed for:
 * - Official record keeping and reporting
 * - Statistics integration and analysis
 * - League standings and tournament updates
 * - Player performance tracking
 * - Historical record maintenance
 *
 * Error results include detailed diagnostic information for:
 * - Understanding why the game end request failed
 * - Determining appropriate remedial actions
 * - User feedback and guidance
 * - System debugging and monitoring
 *
 * @example
 * ```typescript
 * // Successful mercy rule game ending
 * const successResult: EndGameResult = {
 *   success: true,
 *   gameId: GameId.create(),
 *   endedAt: new Date(),
 *   endReason: 'mercy_rule',
 *   finalState: {
 *     finalScore: { home: 18, away: 3 },
 *     winner: 'home',
 *     officialGame: true,
 *     totalInnings: 5,
 *     gameStatus: 'COMPLETED'
 *   },
 *   statistics: {
 *     gameDuration: 125, // minutes
 *     totalAtBats: 42,
 *     totalHits: 28,
 *     totalRuns: 21
 *   },
 *   eventsGenerated: ['GameCompleted', 'FinalStatisticsCalculated'],
 *   notifications: {
 *     playersNotified: 18,
 *     coachesNotified: 4,
 *     officialsNotified: 2
 *   }
 * };
 *
 * // Failed game ending attempt
 * const errorResult: EndGameResult = {
 *   success: false,
 *   gameId: GameId.create(),
 *   error: {
 *     code: 'GAME_ALREADY_COMPLETED',
 *     message: 'Cannot end game that has already been completed',
 *     details: {
 *       currentStatus: 'COMPLETED',
 *       completedAt: new Date('2024-06-15T21:30:00Z')
 *     }
 *   },
 *   timestamp: new Date()
 * };
 * ```
 */

import { GameId, GameStatus } from '@twsoftball/domain';

/**
 * Result of attempting to end a softball game.
 *
 * @remarks
 * This result provides comprehensive information about the outcome
 * of ending a game early, including all necessary details for
 * proper record keeping, statistics integration, and follow-up actions.
 *
 * The result structure supports:
 * - **Success Path**: Complete game ending with final statistics
 * - **Error Path**: Detailed error information and remediation guidance
 * - **Audit Trail**: Complete record of actions taken and events generated
 * - **Integration Data**: Information needed by other systems and processes
 *
 * Success results include:
 * - Final game state and official determination
 * - Complete statistical summaries and player performance data
 * - Generated domain events and system notifications
 * - Follow-up actions and next steps
 *
 * Error results provide:
 * - Specific error codes and descriptive messages
 * - Contextual information about current game state
 * - Guidance on resolving the error condition
 * - System state information for debugging
 */
export interface EndGameResult {
  /** Whether the game was successfully ended */
  readonly success: boolean;

  /** Unique identifier for the game */
  readonly gameId: GameId;

  /** When the operation was completed */
  readonly timestamp: Date;

  /** Final game state information (success path) */
  readonly finalState?: FinalGameStateDTO;

  /** Reason the game was ended (success path) */
  readonly endReason?: string;

  /** When the game was officially ended (success path) */
  readonly endedAt?: Date;

  /** Complete game statistics (success path) */
  readonly statistics?: GameEndStatisticsDTO;

  /** Domain events generated by this operation (success path) */
  readonly eventsGenerated?: readonly string[];

  /** Notification results (success path) */
  readonly notifications?: NotificationSummaryDTO;

  /** Follow-up actions required (success path) */
  readonly followUpActions?: readonly FollowUpActionDTO[];

  /** Error information (error path) */
  readonly error?: EndGameErrorDTO;

  /** Additional metadata about the operation */
  readonly metadata?: {
    readonly operationDuration: number; // milliseconds
    readonly eventsStored: number;
    readonly statisticsCalculated: boolean;
    readonly notificationsSent: number;
  };
}

/**
 * Final state of the game after ending.
 *
 * @remarks
 * Complete information about the game's final state, including
 * score, status, and official determination. This information
 * is used for record keeping and league standings updates.
 */
export interface FinalGameStateDTO {
  /** Final score at game end */
  readonly finalScore: {
    readonly home: number;
    readonly away: number;
  };

  /** Winner of the game (null if not official) */
  readonly winner: 'home' | 'away' | null;

  /** Final game status */
  readonly gameStatus: GameStatus;

  /** Whether the game counts as official */
  readonly officialGame: boolean;

  /** Total innings played */
  readonly totalInnings: number;

  /** Total outs recorded */
  readonly totalOuts: number;

  /** Game duration in minutes */
  readonly gameDurationMinutes: number;

  /** Number of players who participated */
  readonly playersParticipated: number;

  /** Final batting order state */
  readonly finalBattingOrder: {
    readonly home: readonly string[];
    readonly away: readonly string[];
  };

  /** Any special conditions or notes about the ending */
  readonly specialConditions?: readonly string[];
}

/**
 * Statistical summary of the completed game.
 *
 * @remarks
 * Comprehensive statistics calculated at game end, including
 * team totals, individual achievements, and game-level metrics.
 * This data is integrated into season statistics and performance tracking.
 */
export interface GameEndStatisticsDTO {
  /** Total runs scored by both teams */
  readonly totalRuns: number;

  /** Total hits by both teams */
  readonly totalHits: number;

  /** Total errors committed */
  readonly totalErrors: number;

  /** Total at-bats in the game */
  readonly totalAtBats: number;

  /** Game duration in minutes */
  readonly gameDuration: number;

  /** Team-specific statistics */
  readonly teamStats: {
    readonly home: {
      readonly runs: number;
      readonly hits: number;
      readonly errors: number;
      readonly leftOnBase: number;
    };
    readonly away: {
      readonly runs: number;
      readonly hits: number;
      readonly errors: number;
      readonly leftOnBase: number;
    };
  };

  /** Notable individual achievements */
  readonly individualAchievements: readonly {
    readonly playerId: string;
    readonly playerName: string;
    readonly achievement: string;
    readonly value: number;
  }[];

  /** Game-level records or milestones reached */
  readonly gameRecords?: readonly string[];

  /** Whether statistics have been integrated into season totals */
  readonly seasonStatsUpdated: boolean;
}

/**
 * Summary of notifications sent after game ending.
 *
 * @remarks
 * Information about notifications sent to players, coaches,
 * officials, and other stakeholders about the game ending.
 * Used for communication tracking and follow-up.
 */
export interface NotificationSummaryDTO {
  /** Number of players notified */
  readonly playersNotified: number;

  /** Number of coaches notified */
  readonly coachesNotified: number;

  /** Number of officials notified */
  readonly officialsNotified: number;

  /** Number of spectators notified (if applicable) */
  readonly spectatorsNotified?: number;

  /** Notification delivery summary */
  readonly deliveryResults: {
    readonly successful: number;
    readonly failed: number;
    readonly pending: number;
  };

  /** Channels used for notifications */
  readonly channelsUsed: readonly ('email' | 'sms' | 'app' | 'web')[];

  /** Any notification failures or issues */
  readonly notificationIssues?: readonly {
    readonly recipient: string;
    readonly channel: string;
    readonly error: string;
  }[];
}

/**
 * Follow-up actions required after game ending.
 *
 * @remarks
 * List of actions that need to be taken after the game has been
 * ended, such as submitting reports, scheduling makeup games,
 * or handling appeals.
 */
export interface FollowUpActionDTO {
  /** Type of action required */
  readonly actionType:
    | 'submit_report'
    | 'schedule_makeup'
    | 'handle_appeal'
    | 'update_standings'
    | 'process_protest'
    | 'coordinate_officials'
    | 'facility_report';

  /** Description of the action */
  readonly description: string;

  /** Who is responsible for the action */
  readonly assignedTo: string;

  /** When the action should be completed */
  readonly dueDate?: Date;

  /** Priority level of the action */
  readonly priority: 'low' | 'normal' | 'high' | 'urgent';

  /** Additional context or instructions */
  readonly instructions?: string;

  /** Contact information for coordination */
  readonly contactInfo?: string;
}

/**
 * Error information when game ending fails.
 *
 * @remarks
 * Detailed error information explaining why the game could not
 * be ended, including specific error codes, descriptive messages,
 * and contextual information for resolution.
 */
export interface EndGameErrorDTO {
  /** Specific error code for programmatic handling */
  readonly code: EndGameErrorCode;

  /** Human-readable error message */
  readonly message: string;

  /** Current game state that prevented the operation */
  readonly currentGameState?: {
    readonly status: GameStatus;
    readonly inning: number;
    readonly outs: number;
    readonly lastActionTime: Date;
  };

  /** Detailed error context and diagnostic information */
  readonly details?: Record<string, unknown>;

  /** Suggested actions to resolve the error */
  readonly suggestedActions?: readonly string[];

  /** Whether the operation can be retried */
  readonly retryable: boolean;

  /** Contact information for support if needed */
  readonly supportContact?: string;
}

/**
 * Specific error codes for game ending failures.
 *
 * @remarks
 * Standardized error codes that enable appropriate error handling
 * and user feedback in different failure scenarios.
 */
export type EndGameErrorCode =
  | 'GAME_NOT_FOUND'
  | 'GAME_ALREADY_COMPLETED'
  | 'GAME_NOT_STARTED'
  | 'INSUFFICIENT_PERMISSIONS'
  | 'INVALID_END_REASON'
  | 'GAME_STATE_CONFLICT'
  | 'STATISTICS_CALCULATION_FAILED'
  | 'EVENT_STORAGE_FAILED'
  | 'NOTIFICATION_FAILED'
  | 'VALIDATION_FAILED'
  | 'SYSTEM_ERROR';
